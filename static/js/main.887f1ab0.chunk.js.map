{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","Components/CountryPicker/CountryPicker.jsx","api/index.js","Components/Chart/Chart.jsx","App.js","index.js","App.module.css","Components/CountryPicker/CountryPicker.module.css","Components/Chart/Chart.module.css","images/virus.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","a","fetchCountries","fetchAPI","console","log","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","map","country","i","key","url","fetchData","changeableUrl","axios","get","fetchDailyData","modifiedData","dailyData","total","date","reportDate","countries","name","Chart","setDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.887f1ab0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Divider,\n} from \"@material-ui/core\";\n\nimport styles from \"./Cards.module.css\";\nimport Countup from \"react-countup\";\nimport cx from \"classnames\";\nimport createMixins from \"@material-ui/core/styles/createMixins\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <Countup\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of Covid-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <Countup\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recovered cases of Covid-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <Countup\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths from Covid-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from '@material-ui/core'\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport styles from \"./CountryPicker.module.css\";\n\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    }\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  console.log(fetchedCountries);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  )\n};\n\nexport default CountryPicker;\n","import axios from \"axios\";\nimport CountryPicker from \"../Components/CountryPicker/CountryPicker\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`\n  }\n  try {\n    // destructuring\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return {\n      // values and keys have the same name, so we don't need to explicitly define them while destructuring\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate\n    }))\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name)\n  } catch (error) {\n    console.log(error);\n  }\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n\n  const lineChart = (\n    // if length is true, that is, the array is not empty\n    dailyData.length\n      ? (\n        <Line\n          data={{\n            labels: dailyData.map(({ date }) => date),\n            datasets: [{\n              data: dailyData.map(({ confirmed }) => confirmed),\n              label: 'infected',\n              borderColor: '#3333ff',\n              fill: true,\n            }, {\n              data: dailyData.map(({ deaths }) => deaths),\n              label: 'deaths',\n              borderColor: 'red',\n              backgroundColor: 'rgba(255,0,0,0.5)',\n              fill: true,\n            }]\n          }}\n        />) : null\n  );\n\n\n  const barChart = (\n    confirmed\n      ? (\n        <Bar\n          data={{\n            labels: ['Infected', 'Recovered', 'Deaths'],\n            datasets: [{\n              label: 'People',\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n              data: [confirmed.value, recovered.value, deaths.value]\n            }]\n          }}\n          options={{\n            legend: { display: false },\n            title: { display: true, text: `Current state in ${country}` },\n          }}\n        />\n      ) : null\n  )\n\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  )\n};\n\n\n\nexport default Chart;\n","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker } from \"./Components\";\nimport styles from \"./App.module.css\";\n\nimport { fetchData } from \"./api\";\n\nimport coronaImage from './images/virus.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n\n    this.setState({ data: fetchedData, country: country });\n\n  }\n\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"Covid-19\" />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__4LMvE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\"};","module.exports = __webpack_public_path__ + \"static/media/virus.d7265326.png\";"],"sourceRoot":""}